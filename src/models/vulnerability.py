"""
漏洞数据模型定义
"""
from datetime import datetime
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class SeverityLevel(str, Enum):
    """严重性等级"""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    UNKNOWN = "UNKNOWN"


class VulnerabilityStatus(str, Enum):
    """漏洞状态"""
    PUBLISHED = "PUBLISHED"
    ANALYZED = "ANALYZED"
    MODIFIED = "MODIFIED"
    REJECTED = "REJECTED"


class DataSource(str, Enum):
    """数据源"""
    NVD = "NVD"
    CNVD = "CNVD"
    GITHUB = "GITHUB"
    SNYK = "SNYK"
    JFROG = "JFROG"
    OSV = "OSV"
    VENDOR = "VENDOR"
    OTHER = "OTHER"


class CVSSScore(BaseModel):
    """CVSS评分信息"""
    version: str = Field(..., description="CVSS版本")
    base_score: float = Field(..., description="基础分数")
    temporal_score: Optional[float] = Field(None, description="时间分数")
    environmental_score: Optional[float] = Field(None, description="环境分数")
    vector_string: Optional[str] = Field(None, description="向量字符串")
    severity: SeverityLevel = Field(..., description="严重性等级")


class Reference(BaseModel):
    """参考链接"""
    url: str = Field(..., description="链接地址")
    title: Optional[str] = Field(None, description="链接标题")
    source: Optional[str] = Field(None, description="来源")
    tags: List[str] = Field(default_factory=list, description="标签")


class Weakness(BaseModel):
    """弱点信息（CWE）"""
    cwe_id: str = Field(..., description="CWE编号")
    name: str = Field(..., description="弱点名称")
    description: Optional[str] = Field(None, description="弱点描述")


class AffectedProduct(BaseModel):
    """受影响的产品"""
    vendor: str = Field(..., description="厂商")
    product: str = Field(..., description="产品名称")
    version_affected: str = Field(..., description="受影响的版本")
    version_start: Optional[str] = Field(None, description="起始版本")
    version_end: Optional[str] = Field(None, description="结束版本")
    platform: Optional[str] = Field(None, description="平台")


class VulnerabilityData(BaseModel):
    """漏洞数据模型"""
    # 基本信息
    id: str = Field(..., description="漏洞ID")
    cve_id: Optional[str] = Field(None, description="CVE编号")
    title: str = Field(..., description="漏洞标题")
    description: str = Field(..., description="漏洞描述")
    
    # 状态和分类
    status: VulnerabilityStatus = Field(..., description="漏洞状态")
    severity: SeverityLevel = Field(..., description="严重性等级")
    source: DataSource = Field(..., description="数据源")
    
    # 时间信息
    published_date: datetime = Field(..., description="发布时间")
    modified_date: Optional[datetime] = Field(None, description="修改时间")
    created_date: datetime = Field(default_factory=datetime.now, description="创建时间")
    
    # 评分信息
    cvss_scores: List[CVSSScore] = Field(default_factory=list, description="CVSS评分")
    
    # 弱点信息
    weaknesses: List[Weakness] = Field(default_factory=list, description="相关弱点")
    
    # 受影响的产品
    affected_products: List[AffectedProduct] = Field(default_factory=list, description="受影响的产品")
    
    # 参考信息
    references: List[Reference] = Field(default_factory=list, description="参考链接")
    
    # 技术细节
    technical_details: Dict[str, Any] = Field(default_factory=dict, description="技术细节")
    
    # 解决方案
    solution: Optional[str] = Field(None, description="解决方案")
    
    # 原始数据
    raw_data: Dict[str, Any] = Field(default_factory=dict, description="原始数据")
    
    # 标签
    tags: List[str] = Field(default_factory=list, description="标签")
    
    class Config:
        use_enum_values = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """转换为字典格式（用于JSON序列化）"""
        return self.dict()


class CollectionResult(BaseModel):
    """采集结果"""
    source: DataSource = Field(..., description="数据源")
    total_collected: int = Field(..., description="采集总数")
    successful: int = Field(..., description="成功数量")
    failed: int = Field(..., description="失败数量")
    start_time: datetime = Field(..., description="开始时间")
    end_time: datetime = Field(..., description="结束时间")
    duration: float = Field(..., description="持续时间（秒）")
    errors: List[str] = Field(default_factory=list, description="错误信息")
    
    class Config:
        use_enum_values = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """转换为字典格式（用于JSON序列化）"""
        return self.dict()
